===== Undo / Redo =====

# Unodes all commits after HEAD@{index}
git reset HEAD@{index}
# Move the last commit from the [wrong-branch] to [correct-branch]


git checkout [correct-branch]
# Go to [correct-branch]

git cherry-pick [wrong-branch]
# Get the commit from the [wrong-branch]; Only nessesarry if [correct-branch] is not new

git checkout [wrong-branch]
# Go to [wrong-branch]

git reset HEAD~ --hard
# Reste the wrong branch now

git checkout [correct-branch]
# Optional go now to [correct-branch]

# fixing fatal: Could not parse object after unsuccessful revert
git revert --quit


    pulling for fast-forward only (eliminating a chance for unintended merging) git pull --ff-only

    get a tagged branch gicheckout -b <BRANCH_NAME> <TAG_NAME>

    list of all branches that haven't been merged to master git branch --no-merge master


deleting remote branch localy
git branch -r -D <BRANCH_NAME> or to sync with the remote git fetch --all --prune
deleting local branch
git branch -d <BRANCH_NAME>

    list actual remote branchs git ls-remote --heads origin

    list all remote (fetched) branches git branch -r

    list all local branches git branch -l

    find to which branch a given commit belongs
    git branch --contains <COMMIT>

    updating from a forked repository git remote add upstream https://github.com/Microsoft/TypeScript.git git fetch upstream git rebase upstream/master


git checkout -b LOCAL_BRANCH origin/REMOTE_BRANCH


git rebase origin/master

git branch -D LOCAL_BRANCH_TO_DELETE

git push origin :REMOTE_BRANCH_TO_DELETE

git push --force origin MY_BRANCH:REMOTE_BRANCH \\erase the stupid shit i committed

git rebase -i
bisect

git reset --soft HEAD~ - reset to previous commit, but stage the changes in the latest commit.
git reset --keep HEAD~ - reset to previous commit, but don't reset the working directory, just change what 
git reset HEAD~ - reset to previous commit, don't stage the changes, don't touch the working directory. 



        <p>Sets the name you want attached to your commit transactions.</p>

\section{Working with Branches}
List all local branches \\ \texttt{\color{blue} git branch}

List all branches, local and remote \\ \texttt{\color{blue} git branch -av}

Switch to a branch and update working directory \\ \texttt{\color{blue} git checkout mybranch}

Create a new branch called newbranch \\ \texttt{\color{blue} git branch newbranch}

Delete the branch called mybranch \\ \texttt{\color{blue} git branch -d mybranch}

Merge brancha into branchb \\ \texttt{\color{blue} git checkout branchb\\git merge brancha}

Tag the current commit \\ \texttt{\color{blue} git tag mytag}

Unstages file, keeping the file changes \\ \texttt{\color{blue} git reset [file]}

Revert everything to the last commit \\ \texttt{\color{blue} git reset --hard}



Fetch the latest changes from origin and rebase
git pull --rebase

Push local changes to the origin \\ \texttt{\color{blue} git push}

\section{Finally!}
When in doubt, use git help \\ \texttt{\color{blue} git command --help}


List all branches, local and remote
git branch -av

Switch to a branch and update working directory \\ \texttt{\color{blue} git checkout mybranch}

Create a new branch called newbranch \\ \texttt{\color{blue} git branch newbranch}

Delete the branch called mybranch \\ \texttt{\color{blue} git branch -d mybranch}

Merge brancha into branchb \\ \texttt{\color{blue} git checkout branchb\\git merge brancha}

Tag the current commit \\ \texttt{\color{blue} git tag mytag}





Unstages file, keeping the file changes
git reset [file]

Revert everything to the last commit
git reset --hard


Fetch the latest changes from origin
and rebase \\ \texttt{\color{blue} git pull --rebase}
